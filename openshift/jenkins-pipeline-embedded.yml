apiVersion: v1
kind: Template
labels:
  template: ${APP_NAME}-pipeline
message: Usage oc process -f jenkins-pipeline-jenkinsfilepath.yml -p GUID=$GUID | oc create -f -
metadata:
  name: ${APP_NAME}-pipeline-jenkinsfilepath
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations: {}
    labels:
      name: ${APP_NAME}-pipeline-jenkinsfilepath
    name: ${APP_NAME}-pipeline-jenkinsfilepath
  spec:
    strategy:
      type: JenkinsPipeline
      jenkinsPipelineStrategy:
        env:
        - name: GUID
          value: ${GUID}
        - name: APP_NAME
          value: ${APP_NAME}
        - name: CONTEXTDIR
          value: ${CONTEXTDIR}
        - name: GIT_SOURCE_URL
          value: ${GIT_SOURCE_URL}
        - name: GIT_SOURCE_REF
          value: ${GIT_SOURCE_REF}
        - name: APP_IMAGE
          value: ${APP_IMAGE}
        - name: MAVEN_SLAVE_IMAGE
          value: ${MAVEN_SLAVE_IMAGE}
        - name: MAVEN_PATH
          value: ${MAVEN_PATH}
        - name: JENKINS_SLAVE_CPU_REQUEST
          value: ${JENKINS_SLAVE_CPU_REQUEST}
        - name: JENKINS_SLAVE_CPU_LIMIT
          value: ${JENKINS_SLAVE_CPU_LIMIT}
        - name: JENKINS_SLAVE_MEMORY_REQUEST
          value: ${JENKINS_SLAVE_MEMORY_REQUEST}
        - name: JENKINS_SLAVE_MEMORY_LIMIT
          value: ${JENKINS_SLAVE_MEMORY_LIMIT}
        - name: NEXUS_URL
          value: ${NEXUS_URL}
        - name: NEXUS_URI_MAVEN
          value: ${NEXUS_URI_MAVEN}
        - name: NEXUS_URI_PUBLIC
          value: ${NEXUS_URI_PUBLIC}
        - name: NEXUS_REGISTRY_URL
          value: ${NEXUS_REGISTRY_URL}
        - name: NEXUS_USER
          value: ${NEXUS_USER}
        - name: NEXUS_PASSWORD
          value: ${NEXUS_PASSWORD}
        - name: SONAR_URL
          value: ${SONAR_URL}
        - name: REGISTRY_URL
          value: ${REGISTRY_URL}
        jenkinsfile: |-
          pipeline {
            agent {
              kubernetes {
                label "${MAVEN_SLAVE_IMAGE}"
                cloud "openshift"
                inheritFrom "maven"
                containerTemplate(
                  name: "jnlp",
                  image: "${MAVEN_SLAVE_IMAGE}",
                  resourceRequestMemory: "${JENKINS_SLAVE_MEMORY_REQUEST}",
                  resourceLimitMemory: "${JENKINS_SLAVE_MEMORY_LIMIT}",
                  resourceRequestCpu: "${JENKINS_SLAVE_CPU_REQUEST}",
                  resourceLimitCpu: "${JENKINS_SLAVE_CPU_LIMIT}"
                )
              }
            }
            environment {
              mvnCmd = "mvn -s ./nexus_settings.xml"
              // version can be used only if Jenkinsfile is referenced to git repositories.
              // because it couldn't get the pom.xml when the Jenkinsfile embedded in the BuildConfig.
              // version = getVersionFromPom("./pom.xml")
              version = "1.0"
              devTag = "${version}-${BUILD_NUMBER}"
              prodTag = "${version}"
              PATH = "$PATH:${MAVEN_PATH}"
              NEXUS_URL = "${NEXUS_URL}"
              NEXUS_URI_MAVEN = "${NEXUS_URI_MAVEN}"
              NEXUS_URI_PUBLIC = "${NEXUS_URI_PUBLIC}"
              NEXUS_REGISTRY_URL = "${NEXUS_REGISTRY_URL}"
              NEXUS_USER = "${NEXUS_USER}"
              NEXUS_PASSWORD = "${NEXUS_PASSWORD}"
              SONAR_URL = "${SONAR_URL}"
              REGISTRY_URL = "${REGISTRY_URL}"
              TOKEN = "/run/secrets/kubernetes.io/serviceaccount/token"
            }
            options {
              timeout(time: 30, unit: 'MINUTES')
            }
            stages {
              stage('Variable Check') {
                steps {
                  echo "MAVEN_SLAVE_IMAGE: ${MAVEN_SLAVE_IMAGE}"
                  echo "mvnCmd: ${mvnCmd}"
                  echo "version: ${version}"
                  echo "devTag: ${devTag}"
                  echo "prodTag: ${prodTag}"
                  echo "NEXUS_URL: ${NEXUS_URL}"
                  echo "NEXUS_REGISTRY_URL: ${NEXUS_REGISTRY_URL}"
                  echo "SONAR_URL: ${SONAR_URL}"
                  sh "printenv"
                  sh "skopeo --version"
                  sh "oc version"
                  sh "which mvn"
                }
              }
              stage('Check Out Source Code') {
                steps {
                  git url: "${GIT_SOURCE_URL}", branch: "${GIT_SOURCE_REF}"
                  sh "sed -i -e 's|NEXUS_URL|${NEXUS_URL}|' -e 's|NEXUS_URI_PUBLIC|${NEXUS_URI_PUBLIC}|' -e 's|NEXUS_USER|${NEXUS_USER}|' -e 's|NEXUS_PASSWORD|${NEXUS_PASSWORD}|' ./nexus_settings.xml"
                  sh "cat ./nexus_settings.xml"
                }
              }
              stage('Build Source Code') {
                steps {
                  echo "Building artifacts using Maven."
                  sh "${mvnCmd} clean package -DskipTests=true"
                }
              }
              stage('Run Unit Test') {
                steps {
                  echo "Running unit tests using Maven."
                  sh "${mvnCmd} test"
                }
              }
              stage('Run Code Coverage Tests') {
                steps {
                  echo "Running code coverage tests using SonarQube."
                  sh "${mvnCmd} sonar:sonar -Dsonar.host.url=${SONAR_URL} -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"
                }
              }
              stage('Upload Artifacts to Nexus') {
                steps {
                  echo "Archiving the artifacts to the nexus repository."
                  sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::${NEXUS_URL}/${NEXUS_URI_MAVEN}/"
                }
              }
              stage('Build Container Image') {
                steps {
                  echo "Building a container image ${devTag}."
                  script {
                    // OpenShift Jenkins Pipeline (DSL) Plugin
                    openshift.withCluster() {
                      openshift.withProject() {
                        // Create BuildConfig if it doen't exist
                        if(!openshift.selector("bc", "${APP_NAME}").exists()) {
                          // The selector returned from newBuild will select all objects created by the operation
                          def nb = openshift.newBuild(
                            "--name=${APP_NAME}",
                            "--image-stream=${APP_IMAGE}",
                            "--binary=true",
                            "--to=${APP_NAME}:latest")
                        } else {
                          def nb = openshift.selector("bc", "${APP_NAME}")
                          nb.startBuild()
                        }
                        def nb = openshift.selector("bc", "${APP_NAME}")
                        // Print out information about the objects created by newBuild
                        echo "newBuild created: ${nb.count()} objects: ${nb.names()}"
                        // Filter non-BuildConfig objects and create selector which will find builds related to the BuildConfig
                        def buildSelector = nb.narrow("bc").related("builds")
                        // Throw exception after 5 minutes
                        timeout(5) {
                          buildSelector.untilEach(1) {
                            return (it.object().status.phase == "Complete")
                          }
                        }
                        echo "Builds have been completed: ${buildSelector.names()}"
                        // Print a list of the builds which have been created
                        echo "Build logs for ${buildSelector.names()}:"
                        // Find the bc again, and ask for its logs
                        def result = nb.narrow("bc").logs()
                        // Each high-level operation exposes stout/stderr/status of oc actions that composed
                        echo "Result of logs operation:"
                        echo "  status: ${result.status}"
                        echo "  stderr: ${result.err}"
                        echo "  number of actions to fulfill: ${result.actions.size()}"
                        echo "  first action executed: ${result.actions[0].cmd}"
                        // Tag the ${APP_NAME}:latest image as ${APP_NAME}:${devTag}
                        openshift.tag("${APP_NAME}:latest", "${APP_NAME}:${devTag}")
                      }
                    }
                  }
                }
              }
              stage('Upload Image to Nexus') {
                steps {
                  echo "Archiving the container image to the nexus registry."
                  script {
                    sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(cat ${TOKEN}) --dest-creds ${NEXUS_USER}:${NEXUS_PASSWORD} ${REGISTRY_URL}/${OPENSHIFT_BUILD_NAMESPACE}/${APP_NAME}:${devTag} ${NEXUS_REGISTRY_URL}/${APP_NAME}:${devTag}"
                  }
                }
              }
            }
          }
          // Convenience Functions to read variables from the pom.xml
          // Do not change anything below this line.
          def getVersionFromPom(pom) {
            def matcher = readFile(pom) =~ '<version>(.+)</version>'
            matcher ? matcher[0][1] : null
          }
          def getGroupIdFromPom(pom) {
            def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
            matcher ? matcher[0][1] : null
          }
          def getArtifactIdFromPom(pom) {
            def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
            matcher ? matcher[0][1] : null
          }
    triggers:
    - type: ConfigChange
parameters:
- displayName: Random GUID
  name: GUID
  value: ""
  required: true
- displayName: Application Name
  name: APP_NAME
  value: "openshift-tasks"
- displayName: Git Repository Conetext Directory
  description: Context directory of the git repository
  name: CONTEXTDIR
  value: ""
- displayName: Git Repository URL
  description: The URL of the repository with your application source code.
  name: GIT_SOURCE_URL
  value: "https://github.com/hashnao/openshift-tasks.git"
  required: true
- displayName: Git Reference
  name: GIT_SOURCE_REF
  value: master
- displayName: Application ImageStream
  name: APP_IMAGE
  value: "jboss-eap71-openshift:1.3"
  required: true
- displayName: Maven Custom Slave ImageStream
  name: MAVEN_SLAVE_IMAGE
  value: "jenkins-slave-appdev"
  required: true
- displayName: Maven Path
  name: MAVEN_PATH
  value: "/opt/rh/rh-maven35/root/usr/bin"
  required: true
- displayName: Jenkin Slave CPU Request
  name: JENKINS_SLAVE_CPU_REQUEST
  value: "500m"
- displayName: Jenkin Slave CPU Limit
  name: JENKINS_SLAVE_CPU_LIMIT
  value: "2"
- displayName: Jenkin Slave Memory Request
  name: JENKINS_SLAVE_MEMORY_REQUEST
  value: "1Gi"
- displayName: Jenkin Slave Memory Limit
  name: JENKINS_SLAVE_MEMORY_LIMIT
  value: "2Gi"
- displayName: Nexus Repository URL
  name: NEXUS_URL
  value: "http://nexus.${GUID}-nexus.svc:8081"
  required: true
- displayName: Nexus Repository Maven URI
  name: NEXUS_URI_MAVEN
  value: "repository/maven-releases"
  required: true
- displayName: Nexus Repository Public URI
  name: NEXUS_URI_PUBLIC
  value: "repository/maven-all-public/"
  required: true
- displayName: Nexus Registry URL
  name: NEXUS_REGISTRY_URL
  value: "docker://nexus-registry.${GUID}-nexus.svc:5000/repository/registry"
  required: true
- displayName: Nexus Username
  name: NEXUS_USER
  value: "admin"
  required: true
- displayName: Nexus Password
  name: NEXUS_PASSWORD
  value: "admin123"
  required: true
- displayName: SonarQube URL
  name: SONAR_URL
  value: "http://sonarqube.${GUID}-sonarqube.svc:9000"
  required: true
- displayName: Registry URL
  name: REGISTRY_URL
  value: "docker://docker-registry.default.svc:5000"
  required: true

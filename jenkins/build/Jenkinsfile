pipeline {
  agent {
    kubernetes {
      label "${MAVEN_SLAVE_IMAGE}"
      cloud "openshift"
      inheritFrom "maven"
      containerTemplate(
        name: "jnlp",
        image: "${MAVEN_SLAVE_IMAGE}",
        resourceRequestMemory: "${JENKINS_SLAVE_MEMORY_REQUEST}",
        resourceLimitMemory: "${JENKINS_SLAVE_MEMORY_LIMIT}",
        resourceRequestCpu: "${JENKINS_SLAVE_CPU_REQUEST}",
        resourceLimitCpu: "${JENKINS_SLAVE_CPU_LIMIT}"
      )
    }
  }
  environment {
    mvnCmd = "mvn -s ./nexus_settings.xml"
    // version can be used only if Jenkinsfile is referenced to git repositories.
    // because it couldn't get the pom.xml when the Jenkinsfile embedded in the BuildConfig.
    version = getVersionFromPom("./pom.xml")
    devTag = "${version}-${BUILD_NUMBER}"
    prodTag = "${version}"
    PATH = "$PATH:${MAVEN_PATH}"
    APP_NAME = "${APP_NAME}"
    APP_IMAGE = "${APP_IMAGE}"
    GIT_SOURCE_URL = "${GIT_SOURCE_URL}"
    GIT_SOURCE_REF = "${GIT_SOURCE_REF}"
    MAVEN_SLAVE_IMAGE = "${MAVEN_SLAVE_IMAGE}"
    MAVEN_PATH = "${MAVEN_PATH}"
    NEXUS_URL = "${NEXUS_URL}"
    NEXUS_URI_MAVEN = "${NEXUS_URI_MAVEN}"
    NEXUS_URI_PUBLIC = "${NEXUS_URI_PUBLIC}"
    NEXUS_REGISTRY_URL = "${NEXUS_REGISTRY_URL}"
    // Create Jenkins credentials ID with username and password for Nexus and Set the ID.
    NEXUS_CREDENTIALS = credentials("nexus")
    SONAR_URL = "${SONAR_URL}"
    REGISTRY_URL = "${REGISTRY_URL}"
    JENKINS_DEFAULT_CREDENTIALS_ID = "1a12dfa4-7fc5-47a7-aa17-cc56572a41c7"
    TOKEN = credentials("${JENKINS_DEFAULT_CREDENTIALS_ID}")
  }
  options {
    timeout(time: 30, unit: 'MINUTES')
  }
  stages {
    stage('Variable Check') {
      steps {
        echo "mvnCmd: ${mvnCmd}"
        echo "version: ${version}"
        echo "devTag: ${devTag}"
        echo "prodTag: ${prodTag}"
        echo "MAVEN_PATH: ${MAVEN_PATH}"
        sh "printenv"
        sh "skopeo --version"
        sh "oc version"
        sh "which mvn"
      }
    }
    stage('Check Out Source Code') {
      steps {
        git url: "${GIT_SOURCE_URL}", branch: "${GIT_SOURCE_REF}"
        sh "sed -i -e 's|NEXUS_URL|${NEXUS_URL}|' -e 's|NEXUS_URI_PUBLIC|${NEXUS_URI_PUBLIC}|' -e 's|NEXUS_USER|${NEXUS_CREDENTIALS_USR}|' -e 's|NEXUS_PASSWORD|${NEXUS_CREDENTIALS_PSW}|' ./nexus_settings.xml"
        sh "cat ./nexus_settings.xml"
      }
    }
    stage('Build Source Code') {
      steps {
        echo "Building artifacts using Maven."
        sh "${mvnCmd} clean package -DskipTests=true"
      }
    }
    stage('Run Unit Test') {
      steps {
        echo "Running unit tests using Maven."
        sh "${mvnCmd} test"
      }
    }
    stage('Run Code Coverage Tests') {
      steps {
        echo "Running code coverage tests using SonarQube."
        sh "${mvnCmd} sonar:sonar -Dsonar.host.url=${SONAR_URL} -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"
      }
    }
    stage('Upload Artifacts to Nexus') {
      steps {
        echo "Archiving the artifacts to the nexus repository."
        sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::${NEXUS_URL}/${NEXUS_URI_MAVEN}/"
      }
    }
    stage('Build Container Image') {
      steps {
        echo "Building a container image ${devTag}."
        script {
          // OpenShift Jenkins Pipeline (DSL) Plugin
          openshift.withCluster() {
            openshift.withProject() {
              // Create BuildConfig if it doen't exist
              if(!openshift.selector("bc", "${APP_NAME}").exists()) {
                // The selector returned from newBuild will select all objects created by the operation
                def nb = openshift.newBuild(
                  "--name=${APP_NAME}",
                  "--image-stream=${APP_IMAGE}",
                  "--binary=true",
                  "--to=${APP_NAME}:latest")
                // Print out information about the objects created by newBuild
                echo "newBuild created: ${nb.count()} objects: ${nb.names()}"
              } else {
                // Start an image build
                openshift.selector("bc", "${APP_NAME}").startBuild().logs("-f")
              }
              // Filter non-BuildConfig objects and create selector which will find builds related to the BuildConfig
              def nb = openshift.selector("bc", "${APP_NAME}")
              def buildSelector = nb.narrow("bc").related("builds")
              // Throw exception after 5 minutes
              timeout(5) {
                buildSelector.untilEach(1) {
                  return (it.object().status.phase == "Complete")
                }
              }
              echo "Builds have been completed: ${buildSelector.names()}"
            }
          }
        }
      }
    }
    stage('Promote Image') {
      steps {
        echo "Tagging the container image with the build number of ${devTag}."
        script {
          openshift.withCluster() {
            openshift.withProject() {
              // Tag the ${APP_NAME}:latest image as ${APP_NAME}:${devTag}
              openshift.tag("${APP_NAME}:latest", "${APP_NAME}:${devTag}")
            }
          }
        }
      }
    }
    stage('Upload Image to Nexus') {
      steps {
        echo "Archiving the container image to the nexus registry."
        script {
          sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:${TOKEN} --dest-creds ${NEXUS_CREDENTIALS} ${REGISTRY_URL}/${OPENSHIFT_BUILD_NAMESPACE}/${APP_NAME}:${devTag} ${NEXUS_REGISTRY_URL}/${APP_NAME}:${devTag}"
        }
      }
    }
  }
}
// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
